<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=500, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>2014920037-Graphics-Assignment#3</title>

    <script id="heli_vshader" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec4 a_Color;
        attribute vec4 a_Norm;
        uniform mat4 u_MVPMatrix;
        uniform mat4 u_ModelMatrix;
        uniform mat4 u_NormalMatrix;
        varying vec4 v_Color;
        varying vec4 v_Norm;
        varying vec4 v_Position;
        void main() {
            gl_Position = u_MVPMatrix * a_Position;
            v_Position = u_ModelMatrix * a_Position;
            v_Color = a_Color;
            v_Norm = normalize(u_NormalMatrix*a_Norm);
        }        
    </script>
    <script id="heli_fshader" type="x-shader/x-fragment">
        #ifdef GL_ES
        precision mediump float;
        #endif
        uniform float u_Light[9]; // light intensity
        uniform vec4 u_LightPos[9];
        uniform float u_AmbientValue;
        varying vec4 v_Color;
        varying vec4 v_Norm;
        varying vec4 v_Position;
        void main() {
            vec4 result_color = vec4(0.0, 0.0, 0.0, 0.0);
            vec4 norm = normalize(v_Norm);
            for(int i=0;i<9;i++){
                vec3 lightVector = (u_LightPos[i] - v_Position).xyz;
                float distance = length(lightVector);
                float nDotL = max(dot(norm.xyz, normalize(lightVector).xyz), 0.0);
                result_color += nDotL * u_Light[i] * v_Color / (distance);
            }
            result_color += u_AmbientValue * v_Color;
            gl_FragColor = vec4(result_color.rgb, v_Color.a);
        }
    </script>

    <script id="terrain_vshader" type="x-shader/x-vertex">
        #ifdef GL_ES
        precision mediump float;
        #endif
        attribute vec2 a_TexCoord;
        uniform mat4 u_VPMatrix;
        uniform float u_Length; // terrain length at square.
        uniform sampler2D u_Sampler;
        varying vec4 v_Position;
        varying vec2 v_TexCoord;
        void main(){
            float current_z = texture2D(u_Sampler, a_TexCoord).r;
            vec3 pos = vec3( ((a_TexCoord*u_Length) - (u_Length/2.0)).xy, current_z);
            gl_Position = u_VPMatrix * vec4(pos, 1.0);
            v_Position = vec4(pos, 0.0);
            v_TexCoord = a_TexCoord;
        }
    </script>
    <script id="terrain_fshader" type="x-shader/x-fragment">
        #ifdef GL_ES
        precision mediump float;
        #endif
        uniform float u_Light[9]; // light intensity
        uniform vec4 u_LightPos[9];
        uniform float u_AmbientValue;
        uniform sampler2D u_Sampler;
        uniform vec2 u_dxy; // get right and up vector to calculate norm vector
        uniform float u_Length; // terrain length at square.
        varying vec4 v_Position;
        varying vec2 v_TexCoord;
        void main(){
            vec4 result_color = vec4(0.0, 0.0, 0.0, 0.0);
            vec4 color = vec4(0.5, 0.5, 0.5, 1.0);
            
            //calculate normal vector.
            float half_length = u_Length/2.0;
            vec2 up = (v_TexCoord.y + u_dxy.y > 1.0 ) ? v_TexCoord.xy : vec2(v_TexCoord.x, v_TexCoord.y + u_dxy.y);
            vec2 down = (v_TexCoord.y - u_dxy.y < -1.0 ) ? v_TexCoord.xy : vec2(v_TexCoord.x, v_TexCoord.y - u_dxy.y);
            vec2 left = (v_TexCoord.x + u_dxy.x > 1.0) ? v_TexCoord.xy : vec2(v_TexCoord.x + u_dxy.x, v_TexCoord.y);
            vec2 right = (v_TexCoord.x - u_dxy.x < -1.0) ? v_TexCoord.xy : vec2(v_TexCoord.x - u_dxy.x, v_TexCoord.y);
            
            float up_z = texture2D(u_Sampler, up).r;
            float down_z = texture2D(u_Sampler, down).r;
            float left_z = texture2D(u_Sampler, left).r;
            float right_z = texture2D(u_Sampler, right).r;
            
            vec3 t_right = vec3(u_Length, 0, (right_z - left_z)/(2.0*u_dxy.x));
            vec3 t_up = vec3(0, u_Length, (up_z - down_z)/(2.0*u_dxy.y));
            vec3 norm = cross(t_right, t_up);
            norm = normalize(norm);

            for(int i=0;i<9;i++){
                vec3 lightVector = (u_LightPos[i] - v_Position).xyz;
                float distance = length(lightVector);
                float nDotL = max(dot(norm.xyz, normalize(lightVector).xyz), 0.0);
                result_color += nDotL * u_Light[i] * color / (distance);
            }
            result_color += u_AmbientValue * color;
            gl_FragColor = vec4(result_color.rgb, 1.0);
        }
        
    </script>

    <script id="lighter_vshader" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        uniform mat4 u_VPMatrix;
        void main(){
            gl_Position = u_VPMatrix * a_Position;
            gl_PointSize = 5.0;
        }
    </script>
    <script id="lighter_fshader" type="x-shader/x-fragment">
        #ifdef GL_ES
        precision mediump float;
        #endif
        void main(){
            gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
        }
    </script>
        
    <script src="cuon-matrix.js"></script>
    <script src="cuon-utils.js"></script>
    <script src="webgl-debug.js"></script>
    <script src="webgl-utils.js"></script>
    <script src="my_utils.js"></script>
    <script src="texture.js"></script>
    <script src="vertex.js"></script>
    <script src="my_drawing.js"></script>

</head>
<body onload="main()" onkeydown="keydown(event)" onkeyup="keyup(event)" style="text-align: center">
    <canvas id="webgl" width="1200" height="600">
        hoho
    </canvas>
    <h4 id="info">ì˜¤?</h4>
</body>
</html>